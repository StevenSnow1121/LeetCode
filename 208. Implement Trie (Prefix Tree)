class Trie {
public:
    Trie* child[26];
    bool isWord, isPrefix;
    
    /** Initialize your data structure here. */
    Trie() {
        for( int i = 0;i < 26; i++){
           child[i] = 0;
       }
        isWord = isPrefix = false;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Trie* cur = this;
        isPrefix = true;
        for(int i = 0; i < word.length(); i++){
            int ch = word[i] - 'a';
            if(cur -> child[ch] == 0){
                cur->child[ch] = new Trie();
            }
            cur = cur -> child[ch];
            cur -> isPrefix = true;
        }
        cur ->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Trie* cur = this;
        for(int i = 0; i < word.length(); i++){
            int ch = word[i]  - 'a';
            if(cur->child[ch] == 0){
                return false;
            }
            cur = cur->child[ch];
        }
        return cur->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Trie* cur = this;
        for(int i = 0; i < prefix.length(); i++){
            int ch = prefix[i]  - 'a';
            if(cur->child[ch] == 0){
                return false;
            }
            cur = cur->child[ch];
        }
        return cur->isPrefix;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
